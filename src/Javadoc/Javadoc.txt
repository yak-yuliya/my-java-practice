The first form is called Javadoc. You use this when you're writing formal APIs for your code, which are generated by the javadoc tool. For an example, the Java 7 API page uses Javadoc and was generated by that tool.

Some common elements you'd see in Javadoc include:

@param: this is used to indicate what parameters are being passed to a method, and what value they're expected to have

@return: this is used to indicate what result the method is going to give back

@throws: this is used to indicate that a method throws an exception or error in case of certain input

@since: this is used to indicate the earliest Java version this class or function was available in

As an example, here's Javadoc for the compare method of Integer:

/**
 * Compares two {@code int} values numerically.
 * The value returned is identical to what would be returned by:
 * <pre>
 *    Integer.valueOf(x).compareTo(Integer.valueOf(y))
 * </pre>
 *
 * @param  x the first {@code int} to compare
 * @param  y the second {@code int} to compare
 * @return the value {@code 0} if {@code x == y};
 *         a value less than {@code 0} if {@code x < y}; and
 *         a value greater than {@code 0} if {@code x > y}
 * @since 1.7
 */
public static int compare(int x, int y) {
    return (x < y) ? -1 : ((x == y) ? 0 : 1);
}
The second form is a block (multi-line) comment. You use this if you want to have multiple lines in a comment.

I will say that you'd only want to use the latter form sparingly; that is, you don't want to overburden
 your code with block comments that don't describe what behaviors the method/complex function is supposed to have.

Since Javadoc is the more descriptive of the two, and you can generate actual documentation as a result of using it,
 using Javadoc would be more preferable to simple block comments.



For the Java programming language, there is no difference between the two. Java has two types of comments:
traditional comments (/* ... */) and end-of-line comments (// ...). See the Java Language Specification.
So, for the Java programming language, both /* ... */ and /** ... */ are instances of traditional comments,
and they are both treated exactly the same by the Java compiler, i.e., they are ignored (or more correctly:
they are treated as white space).

However, as a Java programmer, you do not only use a Java compiler. You use a an entire tool chain, which
includes e.g. the compiler, an IDE, a build system, etc. And some of these tools interpret things differently
than the Java compiler. In particular, /** ... */ comments are interpreted by the Javadoc tool, which is
included in the Java platform and generates documentation. The Javadoc tool will scan the Java source file and interpret the parts between /** ... */ as documentation.

This is similar to tags like FIXME and TODO: if you include a comment like
// TODO: fix this or
// FIXME: do that, most IDEs will highlight such comments so that you don't forget about them.
But for Java, they are just comments.